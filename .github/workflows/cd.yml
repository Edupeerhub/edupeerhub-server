name: Backend CD
on:
  workflow_run:
    workflows: ["Developemnt CI"]
    types: [completed]
    branches:
      # - development
      - staging
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: false
jobs:
  deploy:
    name: Deploy ${{ matrix.env_name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - branch: development
          #   env_name: development
          #   service_env: development
          #   migration_env: dev_ci
          #   default_port: 3001
          - branch: staging
            env_name: staging
            service_env: staging
            default_port: 3002
            migration_env: staging
          - branch: main
            env_name: production
            service_env: production
            default_port: 3000
            migration_env: production

    if: github.event.workflow_run.conclusion == 'success' 
    environment: ${{ matrix.env_name }}
    steps:
      - name: Checkout (for metadata only)
        if: github.event.workflow_run.head_branch == matrix.branch
        uses: actions/checkout@v4
      - name: Deploy via SSH to ${{ matrix.env_name }}
        if: github.event.workflow_run.head_branch == matrix.branch
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |

            set -euo pipefail

            APP_NAME="edupeerhub-server"
            ENV_NAME="${{ matrix.env_name }}"
            SERVICE_ENV="${{ matrix.service_env }}"   # value for NODE_ENV
            BRANCH="${{ matrix.branch }}"
            REPO_URL="https://github.com/Edupeerhub/edupeerhub-server.git"
            DEPLOY_DIR="/var/www/${APP_NAME}-${ENV_NAME}"
            SERVICE_NAME="${APP_NAME}-${ENV_NAME}"

            echo "Deploying ${APP_NAME} (${ENV_NAME}) to ${DEPLOY_DIR} on branch ${BRANCH}"


            # Install prerequisites
            sudo apt-get update -y
            sudo apt-get install -y git curl ca-certificates

            # Install Node.js 20 if missing or wrong version
            if ! command -v node >/dev/null 2>&1 || ! node -v | grep -q "^v20"; then
              echo "Installing Node.js 20 LTS..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js $(node -v) already installed"
            fi

            # Create deployment directory
            sudo mkdir -p "${DEPLOY_DIR}"
            sudo chown -R $USER:"$USER" "${DEPLOY_DIR}"

            # Clone or update repository
            if [ -d "${DEPLOY_DIR}/.git" ]; then
              echo "Updating existing repo..."
              git -C "${DEPLOY_DIR}" fetch --all --prune
              git -C "${DEPLOY_DIR}" checkout "${BRANCH}"
              git -C "${DEPLOY_DIR}" reset --hard "origin/${BRANCH}"
            else
              echo "Cloning repo..."
              git clone -b "${BRANCH}" --single-branch "${REPO_URL}" "${DEPLOY_DIR}"
            fi
            cd "${DEPLOY_DIR}"


            # Build .env from environment-scoped secrets
            # Allow override of PORT via secret; otherwise fallback to matrix default
            PORT_OVERRIDE='${{ secrets.PORT }}'
            DEFAULT_PORT='${{ matrix.default_port }}'
            PORT_VALUE="${PORT_OVERRIDE:-$DEFAULT_PORT}"
            cat > .env <<'ENVEOF'

            # Generated by GitHub Actions CD

            # Server
            PORT=__PORT__
            NODE_ENV=__NODE_ENV__
            EMAIL_ENABLED=${{ secrets.EMAIL_ENABLED }}

            # Frontend
            CLIENT_URL=${{ secrets.CLIENT_URL }}

            # Database (prefer DATABASE_URL)
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_SSL=${{ secrets.DB_SSL }}

            # Auth
            JWT_SECRET=${{ secrets.JWT_SECRET }}

            # Logging
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}

            # Stream Chat
            STREAM_API_KEY=${{ secrets.STREAM_API_KEY }}
            STREAM_API_SECRET=${{ secrets.STREAM_API_SECRET }}

            # AWS / CloudWatch
            CLOUDWATCH_LOG_GROUP=${{ secrets.CLOUDWATCH_LOG_GROUP }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}

            # Mailtrap
            MAILTRAP_TOKEN=${{ secrets.MAILTRAP_TOKEN }}
            MAILTRAP_ENDPOINT=${{ secrets.MAILTRAP_ENDPOINT }}
            ENVEOF

            # Inject runtime values
            sed -i "s#__PORT__#${PORT_VALUE}#" .env
            sed -i "s#__NODE_ENV__#${SERVICE_ENV}#" .env
            echo "Created .env for ${SERVICE_ENV} at ${DEPLOY_DIR}/.env"

            # Install dependencies
            npm ci --no-audit --no-fund

            # Run database migrations with environment loaded
            set -a
            . ./.env || true
            
            set +a
            NODE_ENV="${SERVICE_ENV}" npx sequelize-cli db:migrate || {
              echo "Migrations failed" >&2; exit 1;
            }

            # Create/Update systemd service
            SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
            sudo bash -c "cat > '${SERVICE_FILE}'" <<SERVICEEOF
            [Unit]
            Description=${APP_NAME} (${ENV_NAME})
            After=network.target
            [Service]
            Type=simple
            User=${{ secrets.SERVER_USER }}
            WorkingDirectory=${DEPLOY_DIR}
            EnvironmentFile=${DEPLOY_DIR}/.env
            ExecStart=/usr/bin/node src/server.js
            Restart=always
            RestartSec=10
            [Install]
            WantedBy=multi-user.target
            SERVICEEOF

            sudo systemctl daemon-reload
            sudo systemctl enable "${SERVICE_NAME}" || true
            sudo systemctl restart "${SERVICE_NAME}"
            sudo systemctl status "${SERVICE_NAME}" --no-pager -l || true


            # Health check
            sleep 2
            if command -v curl >/dev/null 2>&1; then
              curl -fsS "http://localhost:${PORT_VALUE}/api/health" || true
            fi
            echo Deployment completed: ${SERVICE_NAME} running on port ${PORT_VALUE}
