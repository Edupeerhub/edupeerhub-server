name: Backend CD
on:
  workflow_run:
    workflows: ["Developemnt CI"]
    types: [completed]
    branches:
      - staging
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.workflow_run.head_branch }}
  cancel-in-progress: false
jobs:
  deploy-staging:
    name: Deploy staging
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'staging'
    environment: staging
    steps:
      - name: Checkout (for metadata only)
        uses: actions/checkout@v4
      - name: Deploy via SSH to staging
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |

            set -euo pipefail

            APP_NAME="edupeerhub-server"
            ENV_NAME="staging"
            SERVICE_ENV="production"   # value for NODE_ENV
            BRANCH="staging"
            REPO_URL="https://github.com/Edupeerhub/edupeerhub-server.git"
            DEPLOY_DIR="/var/www/${APP_NAME}-${ENV_NAME}"
            SERVICE_NAME="${APP_NAME}-${ENV_NAME}"

            echo "Deploying ${APP_NAME} (${ENV_NAME}) to ${DEPLOY_DIR} on branch ${BRANCH}"


            # Install prerequisites
            sudo apt-get update -y
            sudo apt-get install -y git curl ca-certificates nginx certbot python3-certbot-nginx

            # Install Node.js 20 if missing or wrong version
            if ! command -v node >/dev/null 2>&1 || ! node -v | grep -q "^v20"; then
              echo "Installing Node.js 20 LTS..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js $(node -v) already installed"
            fi

            # Create deployment directory
            sudo mkdir -p "${DEPLOY_DIR}"
            sudo chown -R $USER:"$USER" "${DEPLOY_DIR}"

            # Clone or update repository
            if [ -d "${DEPLOY_DIR}/.git" ]; then
              echo "Updating existing repo..."
              git -C "${DEPLOY_DIR}" fetch --all --prune
              git -C "${DEPLOY_DIR}" checkout "${BRANCH}"
              git -C "${DEPLOY_DIR}" reset --hard "origin/${BRANCH}"
            else
              echo "Cloning repo..."
              git clone -b "${BRANCH}" --single-branch "${REPO_URL}" "${DEPLOY_DIR}"
            fi
            cd "${DEPLOY_DIR}"


            # Build .env from environment-scoped secrets
            PORT_VALUE='${{ secrets.STAGING_PORT }}'
            cat > .env <<'ENVEOF'

            # Generated by GitHub Actions CD

            # Server
            PORT=__PORT__
            NODE_ENV=__NODE_ENV__
            EMAIL_ENABLED=${{ secrets.EMAIL_ENABLED }}

            # Frontend
            CLIENT_URL=${{ secrets.STAGING_CLIENT_URL }}

            # Database (prefer DATABASE_URL)
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            DB_SSL=${{ secrets.DB_SSL }}

            # Auth
            JWT_SECRET=${{ secrets.JWT_SECRET }}

            # Logging
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}

            # Stream Chat
            STREAM_API_KEY=${{ secrets.STAGING_STREAM_API_KEY }}
            STREAM_API_SECRET=${{ secrets.STAGING_STREAM_API_SECRET }}

            # Mailtrap
            MAILTRAP_TOKEN=${{ secrets.MAILTRAP_TOKEN }}
            MAILTRAP_ENDPOINT=${{ secrets.MAILTRAP_ENDPOINT }}
            ENVEOF

            # Inject runtime values
            sed -i "s#__PORT__#${PORT_VALUE}#" .env
            sed -i "s#__NODE_ENV__#${SERVICE_ENV}#" .env
            echo "Created .env for ${SERVICE_ENV} at ${DEPLOY_DIR}/.env"

            # Install dependencies
            npm ci --no-audit --no-fund

            # Run database migrations with environment loaded
            set -a
            . ./.env || true
            
            set +a
            NODE_ENV="${SERVICE_ENV}" npx sequelize-cli db:migrate || {
              echo "Migrations failed" >&2; exit 1;
            }

            # Create/Update systemd service
            SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
            sudo bash -c "cat > '${SERVICE_FILE}'" <<SERVICEEOF
            [Unit]
            Description=${APP_NAME} (${ENV_NAME})
            After=network.target
            [Service]
            Type=simple
            User=${{ secrets.SERVER_USER }}
            WorkingDirectory=${DEPLOY_DIR}
            EnvironmentFile=${DEPLOY_DIR}/.env
            ExecStart=/usr/bin/node src/server.js
            Restart=always
            RestartSec=10
            [Install]
            WantedBy=multi-user.target
            SERVICEEOF

            sudo systemctl daemon-reload
            sudo systemctl enable "${SERVICE_NAME}" || true
            sudo systemctl restart "${SERVICE_NAME}"
            sudo systemctl status "${SERVICE_NAME}" --no-pager -l || true

            # Configure Nginx
            NGINX_CONF="/etc/nginx/sites-available/${SERVICE_NAME}"
            sudo bash -c "cat > '${NGINX_CONF}'" <<NGINXEOF
            server {
                listen 80;
                server_name ${ENV_NAME}.edupeerhub.com;

                location / {
                    proxy_pass http://localhost:${PORT_VALUE};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
            }
            NGINXEOF

            # Enable the site
            sudo ln -s "${NGINX_CONF}" "/etc/nginx/sites-enabled/"
            
            # Test Nginx configuration
            sudo nginx -t
            
            # Reload Nginx to apply changes
            sudo systemctl reload nginx

            # Configure SSL with certbot if not already configured
            if ! sudo certbot certificates | grep -q "${{ secrets.STAGING_CLIENT_URL }}"; then
              echo "Obtaining SSL certificate for ${{ secrets.STAGING_CLIENT_URL }}..."
              sudo certbot --nginx -d "${{ secrets.STAGING_CLIENT_URL }}" --non-interactive --agree-tos -m "${{ secrets.SSL_EMAIL }}" --redirect
            else
              echo "SSL certificate for ${{ secrets.STAGING_CLIENT_URL }} already exists"
            fi


            # Health check
            sleep 2
            if command -v curl >/dev/null 2>&1; then
              curl -fsS "http://localhost:${PORT_VALUE}/api/health" || true
            fi
            echo Deployment completed: ${SERVICE_NAME} running on port ${PORT_VALUE}

  deploy-production:
    name: Deploy production
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    environment: production
    steps:
      - name: Checkout (for metadata only)
        uses: actions/checkout@v4
      - name: Deploy via SSH to production
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRIVATE_SSH_KEY }}
          script: |

            set -euo pipefail

            APP_NAME="edupeerhub-server"
            ENV_NAME="production"
            SERVICE_ENV="production"   # value for NODE_ENV
            BRANCH="main"
            REPO_URL="https://github.com/Edupeerhub/edupeerhub-server.git"
            DEPLOY_DIR="/var/www/${APP_NAME}-${ENV_NAME}"
            SERVICE_NAME="${APP_NAME}-${ENV_NAME}"

            echo "Deploying ${APP_NAME} (${ENV_NAME}) to ${DEPLOY_DIR} on branch ${BRANCH}"


            # Install prerequisites
            sudo apt-get update -y
            sudo apt-get install -y git curl ca-certificates nginx certbot python3-certbot-nginx

            # Install Node.js 20 if missing or wrong version
            if ! command -v node >/dev/null 2>&1 || ! node -v | grep -q "^v20"; then
              echo "Installing Node.js 20 LTS..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            else
              echo "Node.js $(node -v) already installed"
            fi

            # Create deployment directory
            sudo mkdir -p "${DEPLOY_DIR}"
            sudo chown -R $USER:"$USER" "${DEPLOY_DIR}"

            # Clone or update repository
            if [ -d "${DEPLOY_DIR}/.git" ]; then
              echo "Updating existing repo..."
              git -C "${DEPLOY_DIR}" fetch --all --prune
              git -C "${DEPLOY_DIR}" checkout "${BRANCH}"
              git -C "${DEPLOY_DIR}" reset --hard "origin/${BRANCH}"
            else
              echo "Cloning repo..."
              git clone -b "${BRANCH}" --single-branch "${REPO_URL}" "${DEPLOY_DIR}"
            fi
            cd "${DEPLOY_DIR}"


            # Build .env from environment-scoped secrets
            PORT_VALUE="${{ secrets.PRODUCTION_PORT }}"
            cat > .env <<'ENVEOF'

            # Generated by GitHub Actions CD

            # Server
            PORT=__PORT__
            NODE_ENV=__NODE_ENV__
            EMAIL_ENABLED=${{ secrets.EMAIL_ENABLED }}

            # Frontend
            CLIENT_URL=${{ secrets.CLIENT_URL }}

            # Database (prefer DATABASE_URL)
            DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}
            DB_SSL=${{ secrets.DB_SSL }}

            # Auth
            JWT_SECRET=${{ secrets.JWT_SECRET }}

            # Logging
            LOG_LEVEL=${{ secrets.LOG_LEVEL }}

            # Stream Chat
            STREAM_API_KEY=${{ secrets.PRODUCTION_STREAM_API_KEY }}
            STREAM_API_SECRET=${{ secrets.PRODUCTION_STREAM_API_SECRET }}

            # Mailtrap
            MAILTRAP_TOKEN=${{ secrets.MAILTRAP_TOKEN }}
            MAILTRAP_ENDPOINT=${{ secrets.MAILTRAP_ENDPOINT }}
            ENVEOF

            # Inject runtime values
            sed -i "s#__PORT__#${PORT_VALUE}#" .env
            sed -i "s#__NODE_ENV__#${SERVICE_ENV}#" .env
            echo "Created .env for ${SERVICE_ENV} at ${DEPLOY_DIR}/.env"

            # Install dependencies
            npm ci --no-audit --no-fund

            # Run database migrations with environment loaded
            set -a
            . ./.env || true
            
            set +a
            NODE_ENV="${SERVICE_ENV}" npx sequelize-cli db:migrate || {
              echo "Migrations failed" >&2; exit 1;
            }

            # Create/Update systemd service
            SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
            sudo bash -c "cat > '${SERVICE_FILE}'" <<SERVICEEOF
            [Unit]
            Description=${APP_NAME} (${ENV_NAME})
            After=network.target
            [Service]
            Type=simple
            User=${{ secrets.SERVER_USER }}
            WorkingDirectory=${DEPLOY_DIR}
            EnvironmentFile=${DEPLOY_DIR}/.env
            ExecStart=/usr/bin/node src/server.js
            Restart=always
            RestartSec=10
            [Install]
            WantedBy=multi-user.target
            SERVICEEOF

            sudo systemctl daemon-reload
            sudo systemctl enable "${SERVICE_NAME}" || true
            sudo systemctl restart "${SERVICE_NAME}"
            sudo systemctl status "${SERVICE_NAME}" --no-pager -l || true

            # Configure Nginx
            NGINX_CONF="/etc/nginx/sites-available/${SERVICE_NAME}"
            sudo bash -c "cat > '${NGINX_CONF}'" <<NGINXEOF
            server {
                listen 80;
                server_name ${ENV_NAME}.edupeerhub.com;

                location / {
                    proxy_pass http://localhost:${PORT_VALUE};
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_cache_bypass \$http_upgrade;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
            }
            NGINXEOF

            # Enable the site
            sudo ln -s "${NGINX_CONF}" "/etc/nginx/sites-enabled/"
            
            # Test Nginx configuration
            sudo nginx -t
            
            # Reload Nginx to apply changes
            sudo systemctl reload nginx

            # Configure SSL with certbot if not already configured
            if ! sudo certbot certificates | grep -q "${{ secrets.PRODUCTION_CLIENT_URL }}"; then
              echo "Obtaining SSL certificate for ${{ secrets.PRODUCTION_CLIENT_URL }}..."
              sudo certbot --nginx -d "${{ secrets.PRODUCTION_CLIENT_URL }}" --non-interactive --agree-tos -m "${{ secrets.SSL_EMAIL }}" --redirect
            else
              echo "SSL certificate for ${{ secrets.PRODUCTION_CLIENT_URL }} already exists"
            fi


            # Health check
            sleep 2
            if command -v curl >/dev/null 2>&1; then
              curl -fsS "http://localhost:${PORT_VALUE}/api/health" || true
            fi
            echo Deployment completed: ${SERVICE_NAME} running on port ${PORT_VALUE}